{"version":3,"sources":["components/TransactionTable/styles.ts","components/TransactionTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo-uf-ifas.png","assets/background.jpg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["Container","styled","div","TransactionTable","useState","data","setData","filter","chartDataCorn","setChartDataCorn","chartDataCornSilage","setChartDataCornSilage","chartDataForageSoghum","setChartDataForageSoghum","chartDataSoghumSudan","setChartDataSoghumSudan","screenSwitch","setScreenSwitch","windowWidth","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","chartWidth","chartHeight","filteredData","setFilteredData","yearFilter","setYearFilter","companyFilter","setCompanyFilter","seasonFilter","setSeasonFilter","useEffect","auxData","season_filtered","dt","season","selectedSeasonFilter","company","selectedCompanyFilter","year","Number","fetch","then","resp","json","formattedData","map","el","hybrid","relativeMaturity","isNaN","totalProduction","estimatedSilage","milkPerTon","milkPerAcre","diseaseScore","lodgingScore","dmAtHarvest","nel","tdn","cp","ivtdmd30","starch","wsc","adf","aNdf","dNdf3","nDfd30Percentage","type","formattedChartDataCorn","BoldCellStyle","fontWeight","columns","title","field","cellStyle","filterPlaceholder","filtering","defaultSort","lookup","2020","2019","2018","2017","Spring","Summer","Corn","handleClickChart","handleClickTable","allYears","allYearsSingle","Array","from","Set","reverse","allCompanies","allCompaniesSingle","allSeasons","allSeasonsSingle","Button","onClick","variant","className","style","fontSize","Select","labelId","id","value","label","onChange","e","target","MenuItem","icons","Filter","options","emptyRowsWhenPaging","pageSize","pageSizeOptions","exportButton","exportAllData","padding","tableLayout","headerStyle","backgroundColor","color","rowStyle","index","teste","searchFieldVariant","detailPanel","tooltip","render","rowData","display","gridTemplateColumns","gap","textAlign","href","rel","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","ZAxis","dataKey","name","unit","XAxis","tickCount","domain","YAxis","interval","Tooltip","cursor","Legend","Scatter","fill","main","Dashboard","header","Content","img2","Header","src","logoImg","alt","GlobalStyle","createGlobalStyle","App","Modal","setAppElement","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f0cffaf.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  //Fix Display Here\r\n  /* max-width: 1120px;\r\n  height: 230px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-evenly; */\r\n  .custom-filters {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: left;\r\n  }\r\n\r\n  .custom-filter-item {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0.2rem 0rem;\r\n  }\r\n\r\n  .custom-filter-item:last-child{\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  .custom-filter-item p{\r\n    width: 150px;\r\n  }\r\n\r\n  .custom-filter-item .select-filter{\r\n    background-color: #e0e0e0;\r\n    padding-left: 0.5rem;\r\n    padding-right: 0.5rem;\r\n    width: 180px;\r\n  }\r\n\r\n  .show-filter-select-box {\r\n    margin: 0.5rem 0rem;\r\n    width: 170px;\r\n  }\r\n\r\n  table {\r\n    width: 100%;\r\n\r\n    th {\r\n      color: var(--text-title);\r\n      padding: 1rem 0rem;\r\n      text-align: center;\r\n      line-height: 1rem;\r\n      font-weight: 600;\r\n    }\r\n\r\n    td {\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  .footer {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    margin: 1rem;\r\n  }\r\n\r\n  button {\r\n    margin: 0.5rem;\r\n    font-weight: 600;\r\n    font-family: \"Poppins\", sans-serif;\r\n    color: #000;\r\n  }\r\n\r\n  button.selected {\r\n    margin: 0.5rem;\r\n    font-weight: 600;\r\n    font-family: \"Poppins\", sans-serif;\r\n    color: #fff;\r\n    background-color: var(--green);\r\n  }\r\n\r\n  .chart-title {\r\n    margin-top: 2rem;\r\n    font-weight: 600;\r\n    text-align: center;\r\n  }\r\n\r\n  .chart-sub-title {\r\n    margin-top: 1rem;\r\n    text-align: center;\r\n  }\r\n\r\n  .chart-container {\r\n    margin: auto;\r\n  }\r\n\r\n`;\r\n","import MaterialTable from \"material-table\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { Button, Checkbox, Select, MenuItem } from \"@material-ui/core\";\r\nimport DataSet from \"../../data/data.json\"\r\n\r\nimport { useLayoutEffect, useEffect, useState } from \"react\";\r\nimport { Container } from \"./styles\";\r\nimport { ScatterChart, CartesianGrid, XAxis, YAxis, ZAxis, Tooltip, Legend, Scatter } from \"recharts\";\r\nimport { Console } from \"console\";\r\n\r\ninterface dataProps {\r\n  company: string;\r\n  hybrid: string;\r\n  relativeMaturity: number | string;\r\n  totalProduction: number | string;\r\n  estimatedSilage: number | string;\r\n  milkPerTon: number | string;\r\n  milkPerAcre: number | string;\r\n  diseaseScore: number | string;\r\n  lodgingScore: number | string;\r\n  dmAtHarvest: string;\r\n  nel: number | string;\r\n  tdn: number | string;\r\n  cp: number | string;\r\n  ivtdmd30: number | string;\r\n  starch: number | string;\r\n  wsc: number | string;\r\n  adf: number | string;\r\n  aNdf: number | string;\r\n  dNdf3: number | string;\r\n  nDfd30Percentage: number | string;\r\n  year: number;\r\n  season: string;\r\n  type: string;\r\n}\r\n\r\ninterface chartDataProps {\r\n  company: string;\r\n  hybrid: string;\r\n  totalProduction: number | string;\r\n  milkPerTon: number | string;\r\n  year: number;\r\n  season: string;\r\n  type: string;\r\n}\r\n\r\nfunction useWindowSize() {\r\n  const [size, setSize] = useState([0, 0]);\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      setSize([window.innerWidth, window.innerHeight]);\r\n    }\r\n    window.addEventListener(\"resize\", updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener(\"resize\", updateSize);\r\n  }, []);\r\n  return size;\r\n}\r\n\r\n// function ShowWindowDimensions(props) {\r\n//   const [width, height] = useWindowSize();\r\n//   return <span>Window size: {width} x {height}</span>;\r\n// }\r\n\r\nexport function TransactionTable() {\r\n  const [data, setData] = useState<dataProps[]>([]);\r\n  const [filter, setFilter] = useState<boolean>(false);\r\n  const [chartDataCorn, setChartDataCorn] = useState<chartDataProps[]>([]);\r\n  const [chartDataCornSilage, setChartDataCornSilage] = useState<chartDataProps[]>([]);\r\n  const [chartDataForageSoghum, setChartDataForageSoghum] = useState<chartDataProps[]>([]);\r\n  const [chartDataSoghumSudan, setChartDataSoghumSudan] = useState<chartDataProps[]>([]);\r\n\r\n  const [screenSwitch, setScreenSwitch] = useState<string>(\"table2020\");\r\n\r\n  const windowWidth = useWindowSize()[0];\r\n  const chartWidth = windowWidth > 1120 ? 1120 - 30 : windowWidth - 30;\r\n  const chartHeight = chartWidth < 600 ? 300 : chartWidth / 2;\r\n\r\n  //////////////////////////////////////////\r\n  // Customized Filters\r\n  //////////////////////////////////////////\r\n\r\n  const [filteredData, setFilteredData] = useState<dataProps[]>([]);\r\n  const [yearFilter, setYearFilter] = useState<string>(\"all\");\r\n  const [companyFilter, setCompanyFilter] = useState<string>(\"all\");\r\n  const [seasonFilter, setSeasonFilter] = useState<string>(\"all\");\r\n\r\n  useEffect(() => {\r\n    const year_filtered = selectedYearFilter(data);\r\n    const company_filtered = selectedCompanyFilter(year_filtered);\r\n    const season_filtered = selectedSeasonFilter(company_filtered);\r\n\r\n    setFilteredData(season_filtered);\r\n\r\n  }, [yearFilter, companyFilter, seasonFilter])\r\n\r\n\r\n  function selectedYearFilter(auxData: dataProps[]): dataProps[] {\r\n    return (yearFilter === \"all\" ? auxData : auxData.filter(dt => dt.year === Number(yearFilter)))\r\n  }\r\n  function selectedCompanyFilter(auxData: dataProps[]): dataProps[] {\r\n    return (companyFilter === \"all\" ? auxData : auxData.filter(dt => dt.company === (companyFilter)))\r\n  }\r\n  function selectedSeasonFilter(auxData: dataProps[]): dataProps[] {\r\n    return (seasonFilter === \"all\" ? auxData : auxData.filter(dt => dt.season === (seasonFilter)))\r\n  }\r\n\r\n  //////////////////////////////////////////\r\n  // End of Customized Filters\r\n  //////////////////////////////////////////\r\n\r\n  // Populating Data Set\r\n  useEffect(() => {\r\n    fetch(\"https://raw.githubusercontent.com/devfel/forage-hybrid-table/master/src/data/data.json\")\r\n      .then((resp) => resp.json())\r\n      .then((resp) => {\r\n        const formattedData = resp.map((el: dataProps) => {\r\n          return {\r\n            company: el.company,\r\n            hybrid: el.hybrid,\r\n            relativeMaturity: !isNaN(Number(el.relativeMaturity)) ? Number(el.relativeMaturity) : \"-\",\r\n            totalProduction: Number(el.totalProduction),\r\n            estimatedSilage: !isNaN(Number(el.estimatedSilage)) ? Number(el.estimatedSilage) : \"-\",\r\n            milkPerTon: !isNaN(Number(el.milkPerTon)) ? Number(el.milkPerTon) : \"-\",\r\n            milkPerAcre: !isNaN(Number(el.milkPerAcre)) ? Number(el.milkPerAcre) : \"-\",\r\n            diseaseScore: !isNaN(Number(el.diseaseScore)) ? Number(el.diseaseScore) : \"-\",\r\n            lodgingScore: !isNaN(Number(el.lodgingScore)) ? Number(el.lodgingScore) : \"-\",\r\n            dmAtHarvest: el.dmAtHarvest,\r\n            nel: !isNaN(Number(el.nel)) ? Number(el.nel) : \"-\",\r\n            tdn: !isNaN(Number(el.tdn)) ? Number(el.tdn) : \"-\",\r\n            cp: !isNaN(Number(el.cp)) ? Number(el.cp) : \"-\",\r\n            ivtdmd30: !isNaN(Number(el.ivtdmd30)) ? Number(el.ivtdmd30) : \"-\",\r\n            starch: !isNaN(Number(el.starch)) ? Number(el.starch) : \"-\",\r\n            wsc: !isNaN(Number(el.wsc)) ? Number(el.wsc) : \"-\",\r\n            adf: !isNaN(Number(el.adf)) ? Number(el.adf) : \"-\",\r\n            aNdf: !isNaN(Number(el.aNdf)) ? Number(el.aNdf) : \"-\",\r\n            dNdf3: !isNaN(Number(el.dNdf3)) ? Number(el.dNdf3) : \"-\",\r\n            nDfd30Percentage: !isNaN(Number(el.nDfd30Percentage)) ? Number(el.nDfd30Percentage) : \"-\",\r\n            year: !isNaN(Number(el.year)) ? Number(el.year) : 0,\r\n            season: el.season,\r\n            type: el.type,\r\n          };\r\n        });\r\n\r\n        setFilteredData(formattedData);\r\n        setData(formattedData);\r\n        return setData(formattedData);\r\n      });\r\n  }, []);\r\n\r\n\r\n\r\n  // Populating Data Set - Summer Corn (*NO IF ON SEASON)\r\n  useEffect(() => {\r\n    const formattedChartDataCorn = filteredData.map((el: chartDataProps) => {\r\n      if (el.type === \"Corn\") {\r\n        return {\r\n          company: el.company,\r\n          hybrid: el.hybrid,\r\n          totalProduction: el.totalProduction,\r\n          milkPerTon: el.milkPerTon,\r\n          year: el.year,\r\n          season: el.season,\r\n          type: el.type,\r\n        };\r\n      } else\r\n        return {\r\n          company: \"-\",\r\n          hybrid: \"-\",\r\n          totalProduction: \"-\",\r\n          milkPerTon: \"-\",\r\n          year: 0,\r\n          season: \"-\",\r\n          type: \"-\",\r\n        };\r\n    });\r\n\r\n    setChartDataCorn(formattedChartDataCorn);\r\n  }, [filteredData]);\r\n\r\n  // Populating Data Set - Spring Corn Silage (*NO IF ON SEASON)\r\n  useEffect(() => {\r\n    const formattedChartDataCorn = filteredData.map((el: chartDataProps) => {\r\n      if (el.type === \"Corn Silage\") {\r\n        return {\r\n          company: el.company,\r\n          hybrid: el.hybrid,\r\n          totalProduction: el.totalProduction,\r\n          milkPerTon: el.milkPerTon,\r\n          year: el.year,\r\n          season: el.season,\r\n          type: el.type,\r\n        };\r\n      } else\r\n        return {\r\n          company: \"-\",\r\n          hybrid: \"-\",\r\n          totalProduction: \"-\",\r\n          milkPerTon: \"-\",\r\n          year: 0,\r\n          season: \"-\",\r\n          type: \"-\",\r\n        };\r\n    });\r\n\r\n    setChartDataCornSilage(formattedChartDataCorn);\r\n  }, [filteredData]);\r\n\r\n  // Populating Data Set - Summer Forage Soghum (*NO IF ON SEASON)\r\n  useEffect(() => {\r\n    const formattedChartDataCorn = filteredData.map((el: chartDataProps) => {\r\n      if (el.type === \"Forage Soghum\") {\r\n        return {\r\n          company: el.company,\r\n          hybrid: el.hybrid,\r\n          totalProduction: el.totalProduction,\r\n          milkPerTon: el.milkPerTon,\r\n          year: el.year,\r\n          season: el.season,\r\n          type: el.type,\r\n        };\r\n      } else\r\n        return {\r\n          company: \"-\",\r\n          hybrid: \"-\",\r\n          totalProduction: \"-\",\r\n          milkPerTon: \"-\",\r\n          year: 0,\r\n          season: \"-\",\r\n          type: \"-\",\r\n        };\r\n    });\r\n\r\n    setChartDataForageSoghum(formattedChartDataCorn);\r\n  }, [filteredData]);\r\n\r\n  // Populating Data Set - Summer Soghum Sudan (*NO IF ON SEASON)\r\n  useEffect(() => {\r\n    const formattedChartDataCorn = filteredData.map((el: chartDataProps) => {\r\n      if (el.type === \"Soghum Sudan\") {\r\n        return {\r\n          company: el.company,\r\n          hybrid: el.hybrid,\r\n          totalProduction: el.totalProduction,\r\n          milkPerTon: el.milkPerTon,\r\n          year: el.year,\r\n          season: el.season,\r\n          type: el.type,\r\n        };\r\n      } else\r\n        return {\r\n          company: \"-\",\r\n          hybrid: \"-\",\r\n          totalProduction: \"-\",\r\n          milkPerTon: \"-\",\r\n          year: 0,\r\n          season: \"-\",\r\n          type: \"-\",\r\n        };\r\n    });\r\n\r\n    setChartDataSoghumSudan(formattedChartDataCorn);\r\n  }, [filteredData]);\r\n\r\n\r\n  // const TableCellStyle = { borderRight: \"1px solid #e5e5e5\" };\r\n  const BoldCellStyle = { fontWeight: 600 };\r\n  const yearsLookup = {\r\n    2020: \"2020\",\r\n    2019: \"2019\",\r\n    2018: \"2018\",\r\n    2017: \"2017\",\r\n  };\r\n\r\n  const speciesLookup = {\r\n    \"Corn Silage\": \"Corn Silage\",\r\n    Corn: \"Corn\",\r\n    \"Soghum Sudan\": \"Soghum Sudan\",\r\n    \"Forage Soghum\": \"Forage Soghum\",\r\n  };\r\n\r\n  const seasonLookup = { Spring: \"Spring\", Summer: \"Summer\" };\r\n\r\n  const columns = [\r\n    { title: \"Company\", field: \"company\", cellStyle: BoldCellStyle, filterPlaceholder: \"Search\" },\r\n    { title: \"Hybrid\", field: \"hybrid\", cellStyle: BoldCellStyle, filterPlaceholder: \"Search\" },\r\n    { title: \"Total Production (lb DM/A)\", field: \"totalProduction\", filtering: false, defaultSort: \"desc\" },\r\n    //{ title: \"Estimated Silage (ton Silage/A)\", field: \"estimatedSilage\", filtering: false },\r\n    { title: \"Milk Production per ton (lb milk/ton)\", field: \"milkPerTon\", filtering: false },\r\n    { title: \"Milk production per acre (lb milk/A)\", field: \"milkPerAcre\", filtering: false },\r\n    { title: \"Disease score\", field: \"diseaseScore\", filtering: false },\r\n    { title: \"Year\", field: \"year\", lookup: yearsLookup, filterPlaceholder: \"Select\" },\r\n    { title: \"Season\", field: \"season\", lookup: seasonLookup, filterPlaceholder: \"Select\" },\r\n    { title: \"Species\", field: \"type\", lookup: speciesLookup, filterPlaceholder: \"Select\" },\r\n  ];\r\n\r\n  const handleChangeFilter = () => {\r\n    setFilter(!filter);\r\n  };\r\n  const handleClickChart = () => {\r\n    setScreenSwitch(\"chart2020\");\r\n  };\r\n  const handleClickTable = () => {\r\n    setScreenSwitch(\"table2020\");\r\n  };\r\n\r\n  //Variables to populate filters dinamically \r\n  const allYears = data.map(el => el.year);\r\n  const allYearsSingle = Array.from(new Set(allYears)).reverse();\r\n  const allCompanies = data.map(el => el.company);\r\n  const allCompaniesSingle = Array.from(new Set(allCompanies));\r\n  const allSeasons = data.map(el => el.season);\r\n  const allSeasonsSingle = Array.from(new Set(allSeasons));\r\n\r\n  if (screenSwitch === \"table2020\") {\r\n    return (\r\n      <Container>\r\n        <Button onClick={handleClickTable} variant=\"contained\" className=\"selected\">\r\n          Table\r\n        </Button>\r\n        <Button onClick={handleClickChart} variant=\"contained\">\r\n          Chart\r\n        </Button>\r\n\r\n        {/* Not using the original filters\r\n        <div className=\"show-filter-select-box\">\r\n          <FormControlLabel style={{ fontSize: \"20rem\" }} control={<Checkbox checked={filter} onChange={handleChangeFilter} color=\"default\" />} label=\"Hide/Show Filters\" />\r\n        </div>\r\n        */}\r\n        <div className=\"show-filter-select-box\">\r\n          <p style={{ fontSize: \"1rem\" }}> <b>Available Filters</b> </p>\r\n        </div>\r\n\r\n        <div className=\"custom-filters\">\r\n          <div className=\"custom-company-filter custom-filter-item\">\r\n            <p>Filter by Company:</p>\r\n            <Select className=\"select-filter\"\r\n              labelId=\"filter-company-label\"\r\n              id=\"filter-company-id\"\r\n              value={companyFilter}\r\n              label=\"Company\"\r\n              onChange={(e) => setCompanyFilter(e.target.value as any)}\r\n            >\r\n              <MenuItem value={\"all\"}><em>All</em></MenuItem>\r\n              {allCompaniesSingle.map(el => <MenuItem value={el}>{el}</MenuItem>)}\r\n            </Select>\r\n          </div>\r\n\r\n\r\n          <div className=\"custom-year-filter custom-filter-item\">\r\n            <p>Filter by Year:</p>\r\n            <Select className=\"select-filter\"\r\n              labelId=\"filter-year-label\"\r\n              id=\"filter-year-id\"\r\n              value={yearFilter}\r\n              label=\"Year\"\r\n              onChange={(e) => setYearFilter(e.target.value as any)}\r\n            >\r\n              <MenuItem value={\"all\"}><em>All</em></MenuItem>\r\n              {allYearsSingle.map(el => <MenuItem value={el}>{el}</MenuItem>)}\r\n\r\n              {/* //Old Method used to Populate Filters Manually\r\n              <MenuItem value={2020}>2020</MenuItem>\r\n              <MenuItem value={2019}>2019</MenuItem>\r\n              <MenuItem value={2018}>2018</MenuItem>\r\n              <MenuItem value={2017}>2017</MenuItem>\r\n              */ }\r\n            </Select>\r\n          </div>\r\n\r\n\r\n\r\n          <div className=\"custom-season-filter custom-filter-item\">\r\n            <p>Filter by Season:</p>\r\n            <Select className=\"select-filter\"\r\n              labelId=\"filter-season-label\"\r\n              id=\"filter-season-id\"\r\n              value={seasonFilter}\r\n              label=\"Season\"\r\n              onChange={(e) => setSeasonFilter(e.target.value as any)}\r\n            >\r\n              <MenuItem value={\"all\"}><em>All</em></MenuItem>\r\n              {allSeasonsSingle.map(el => <MenuItem value={el}>{el}</MenuItem>)}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <MaterialTable\r\n          icons={{ Filter: (() => <div></div>) as any }}\r\n          columns={columns as any}\r\n          data={filteredData}\r\n          options={{\r\n            filtering: filter,\r\n            emptyRowsWhenPaging: false,\r\n            pageSize: 10,\r\n            pageSizeOptions: [10, 20, 50, 100],\r\n            exportButton: true,\r\n            exportAllData: true,\r\n            padding: \"dense\",\r\n            tableLayout: \"auto\",\r\n            headerStyle: {\r\n              backgroundColor: \"#FA4616\",\r\n              color: \"#fefefe\",\r\n            },\r\n            rowStyle: (data, index, teste) => index % 2 == 0 ? {\r\n              backgroundColor: \"#f8f8f8\",\r\n              fontSize: \"85%\",\r\n            } : {\r\n              backgroundColor: \"#fdfdfd\",\r\n              fontSize: \"85%\",\r\n            },\r\n            searchFieldVariant: \"outlined\",\r\n          }}\r\n          detailPanel={[\r\n            {\r\n              tooltip: \"Show Details\",\r\n              render: (rowData) => {\r\n                return (\r\n                  <div\r\n                    style={{\r\n                      display: \"grid\",\r\n                      gridTemplateColumns: \"repeat(5, 1fr)\",\r\n                      gap: \"1rem\",\r\n                      fontSize: \"1rem\",\r\n                      padding: \"1rem\",\r\n                      textAlign: \"center\",\r\n                      color: \"white\",\r\n                      backgroundColor: \"#0021A5\",\r\n                    }}\r\n                  >\r\n                    <p>Relative Maturity: {rowData.relativeMaturity}</p>\r\n                    <p>Estimated Silage (Ton/A): {rowData.estimatedSilage}</p>\r\n                    <p>Lodging Score: {rowData.lodgingScore}</p>\r\n                    <p>DM% at Harvest : {rowData.dmAtHarvest}</p>\r\n                    <p>NEl: {rowData.nel} </p>\r\n                    <p>TDN: {rowData.tdn} </p>\r\n                    <p>CP: {rowData.cp} </p>\r\n                    <p>IVTDMD30: {rowData.ivtdmd30} </p>\r\n                    <p>Starch: {rowData.starch} </p>\r\n                    <p>WSC: {rowData.wsc} </p>\r\n                    <p>ADF: {rowData.adf} </p>\r\n                    <p>aNDF: {rowData.aNdf} </p>\r\n                    <p>dNDF30: {rowData.dNdf3} </p>\r\n                    <p>NDFD30 (%NDF): {rowData.nDfd30Percentage} </p>\r\n                  </div>\r\n                );\r\n              },\r\n            },\r\n          ]}\r\n          title=\"UF Silage Hybrid Trial Table\"\r\n        />\r\n        <div className=\"footer\">\r\n          <span>*All the information were gathered from the University of Florida Corn Silage and Forage Field Day WebSite.</span>\r\n          <span>\r\n            Visit{\" \"}\r\n            <a href=\"https://animal.ifas.ufl.edu/extension/courses/csfd/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {\" \"}\r\n              https://animal.ifas.ufl.edu/extension/courses/csfd/{\" \"}\r\n            </a>{\" \"}\r\n            for more details.\r\n          </span>\r\n          <span>Contact us at <a href=\"mailto: forages@ifas.ufl.edu\">forages@ifas.ufl.edu</a>.</span>\r\n        </div>\r\n      </Container>\r\n    );\r\n  } else {\r\n    return (\r\n      <Container>\r\n        <Button onClick={handleClickTable} variant=\"contained\">\r\n          Table\r\n        </Button>\r\n        <Button onClick={handleClickChart} variant=\"contained\" className=\"selected\">\r\n          Chart\r\n        </Button>\r\n\r\n        <div className=\"chart-title\">UF Silage Hybrid Trial Chart</div>\r\n        <div className=\"chart-sub-title\">Total DM Production (lb DM/ton) X Milk Production (lb milk/ton) </div>\r\n\r\n        <ScatterChart className=\"chart-container\" width={chartWidth} height={chartHeight} margin={{ top: 20, right: 30, bottom: 10, left: 0 }}>\r\n          <CartesianGrid strokeDasharray=\"1 1\" />\r\n          <ZAxis dataKey=\"hybrid\" name=\"Hybrid Entry\" unit=\"\" />\r\n          <XAxis tickCount={5} dataKey=\"totalProduction\" type=\"number\" domain={[6000, 22000]} name=\"Total Production\" unit=\" lb DM/A\" />\r\n          <YAxis interval={0} tickCount={5} dataKey=\"milkPerTon\" type=\"number\" domain={[1400, 3800]} name=\"Milk Production\" unit=\" mk/ton\" />\r\n          <Tooltip cursor={{ strokeDasharray: \"10 10\" }} />\r\n          <Legend />\r\n          {/* <Scatter name=\"All\" data={data} fill=\"#000\" /> */}\r\n          <Scatter name=\"Spring Corn Silage\" data={chartDataCornSilage} fill=\"#8884d8\" />\r\n          <Scatter name=\"Summer Corn\" data={chartDataCorn} fill=\"#96afa0\" />\r\n          <Scatter name=\"Summer Forage Soghum\" data={chartDataForageSoghum} fill=\"#443850\" />\r\n          <Scatter name=\"Summer Soghum Sudan\" data={chartDataSoghumSudan} fill=\"#008f28\" />\r\n        </ScatterChart>\r\n\r\n        <div className=\"footer\">\r\n          <span>*All the information were gathered from the University of Florida website.</span>\r\n          <span>\r\n            Visit{\" \"}\r\n            <a href=\"https://animal.ifas.ufl.edu/extension/courses/csfd/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {\" \"}\r\n              https://animal.ifas.ufl.edu/extension/courses/csfd/{\" \"}\r\n            </a>{\" \"}\r\n            for more details.\r\n          </span>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n  padding: 0.5rem 1rem;\r\n  background-color: #fff;\r\n`;\r\n","import { TransactionTable } from \"../TransactionTable\";\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Dashboard() {\r\n  return (\r\n    <Container>\r\n      <TransactionTable />\r\n    </Container>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-uf-ifas.4f5deef3.png\";","export default __webpack_public_path__ + \"static/media/background.08602167.jpg\";","import styled from \"styled-components\";\r\nimport img from \"../../assets/background.png\";\r\nimport img2 from \"../../assets/background.jpg\";\r\n\r\n\r\nexport const Container = styled.header`\r\n  background: var(--dark-green);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  max-width: 1120px;\r\n  height: 230px;\r\n  margin: 0 auto;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n\r\n  background-image: url(${img2});\r\n\r\n  img {\r\n    opacity: 0.95;\r\n    width: 160px;\r\n    height: auto;\r\n    margin-left: 1rem;\r\n    margin-right: 1rem;\r\n    border-radius: 0.4rem;\r\n    background-color: #fefefe;\r\n\r\n    transition: filter 0.4s;\r\n    &:hover {\r\n      filter: brightness(1.1);\r\n    }\r\n  }\r\n\r\n  button {\r\n    margin-left: 1rem;\r\n    margin-right: 1rem;\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n    background-color: #fefefe;\r\n    opacity: 0.9;\r\n\r\n    border: 0;\r\n    padding: 1rem 2rem;\r\n    border-radius: 0.4rem;\r\n\r\n    transition: filter 0.2s;\r\n    &:hover {\r\n      filter: brightness(1.2);\r\n    }\r\n  }\r\n`;\r\n","import logoImg from \"../../assets/logo-uf-ifas.png\";\r\nimport { Container, Content } from \"./styles\";\r\n\r\nexport function Header() {\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <a href=\"https://animal.ifas.ufl.edu/extension/courses/csfd/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img src={logoImg} alt=\"CSFD Logo\" />\r\n        </a>\r\n        <button type=\"button\">\r\n          <a href=\"https://animal.ifas.ufl.edu/extension/courses/csfd/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            UF Silage Hybrid Decision Tool\r\n          </a>\r\n        </button>\r\n      </Content>\r\n    </Container>\r\n  );\r\n}\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n:root {\r\n    --red: #e52e4d;\r\n    --blue: #5429cc;\r\n    --green: #0021A5;\r\n\r\n    --dark-green: #0021A5;\r\n    --light-green: #d2f8d2;\r\n\r\n    --blue-light: #6933ff;\r\n\r\n    --text-title: #363f5f;\r\n    --text-body: #969cb3;\r\n\r\n    --background: #f0f2f5;\r\n    --shape: #FFFFFF;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    // default font-size (6.25% per pixel)\r\n    font-size: 87.5%; //14px\r\n\r\n    @media (max-width: 1080px) {\r\n        font-size: 75%; //13px\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        font-size: 62.5%; //12px\r\n    }\r\n}\r\n\r\nbody {\r\n    background: var(--background);\r\n    -webkit-font-smoothing: antialiased;\r\n}\r\n\r\nbody, input, textarea, button {\r\n    font-family: \"Poppins\", sans-serif;\r\n    font-weight: 400;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6, strong, th {\r\n    font-family: \"Poppins\", sans-serif;\r\n    font-weight: 600;\r\n}\r\n\r\nbutton {\r\n    cursor: pointer;\r\n}\r\n\r\n[disabled] {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n}\r\n\r\n`;\r\n","import { Dashboard } from \"./components/Dashboard\";\r\nimport { Header } from \"./components/Header\";\r\nimport { GlobalStyle } from \"./styles/global\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nexport function App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Header />\r\n      <Dashboard />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}